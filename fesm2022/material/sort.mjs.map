{"version":3,"file":"sort.mjs","sources":["../../../../../../../src/components-examples/material/sort/sort-overview/sort-overview-example.ts","../../../../../../../src/components-examples/material/sort/sort-overview/sort-overview-example.html","../../../../../../../src/components-examples/material/sort/sort-harness/sort-harness-example.ts","../../../../../../../src/components-examples/material/sort/sort-harness/sort-harness-example.html","../../../../../../../src/components-examples/material/sort/sort_public_index.ts"],"sourcesContent":["import {Component} from '@angular/core';\r\nimport {Sort, MatSortModule} from '@angular/material/sort';\r\n\r\nexport interface Dessert {\r\n  calories: number;\r\n  carbs: number;\r\n  fat: number;\r\n  name: string;\r\n  protein: number;\r\n}\r\n\r\n/**\r\n * @title Sorting overview\r\n */\r\n@Component({\r\n  selector: 'sort-overview-example',\r\n  templateUrl: 'sort-overview-example.html',\r\n  styleUrls: ['sort-overview-example.css'],\r\n  standalone: true,\r\n  imports: [MatSortModule],\r\n})\r\nexport class SortOverviewExample {\r\n  desserts: Dessert[] = [\r\n    {name: 'Frozen yogurt', calories: 159, fat: 6, carbs: 24, protein: 4},\r\n    {name: 'Ice cream sandwich', calories: 237, fat: 9, carbs: 37, protein: 4},\r\n    {name: 'Eclair', calories: 262, fat: 16, carbs: 24, protein: 6},\r\n    {name: 'Cupcake', calories: 305, fat: 4, carbs: 67, protein: 4},\r\n    {name: 'Gingerbread', calories: 356, fat: 16, carbs: 49, protein: 4},\r\n  ];\r\n\r\n  sortedData: Dessert[];\r\n\r\n  constructor() {\r\n    this.sortedData = this.desserts.slice();\r\n  }\r\n\r\n  sortData(sort: Sort) {\r\n    const data = this.desserts.slice();\r\n    if (!sort.active || sort.direction === '') {\r\n      this.sortedData = data;\r\n      return;\r\n    }\r\n\r\n    this.sortedData = data.sort((a, b) => {\r\n      const isAsc = sort.direction === 'asc';\r\n      switch (sort.active) {\r\n        case 'name':\r\n          return compare(a.name, b.name, isAsc);\r\n        case 'calories':\r\n          return compare(a.calories, b.calories, isAsc);\r\n        case 'fat':\r\n          return compare(a.fat, b.fat, isAsc);\r\n        case 'carbs':\r\n          return compare(a.carbs, b.carbs, isAsc);\r\n        case 'protein':\r\n          return compare(a.protein, b.protein, isAsc);\r\n        default:\r\n          return 0;\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction compare(a: number | string, b: number | string, isAsc: boolean) {\r\n  return (a < b ? -1 : 1) * (isAsc ? 1 : -1);\r\n}\r\n","<table matSort (matSortChange)=\"sortData($event)\">\r\n  <tr>\r\n    <th mat-sort-header=\"name\">Dessert (100g)</th>\r\n    <th mat-sort-header=\"calories\">Calories</th>\r\n    <th mat-sort-header=\"fat\">Fat (g)</th>\r\n    <th mat-sort-header=\"carbs\">Carbs (g)</th>\r\n    <th mat-sort-header=\"protein\">Protein (g)</th>\r\n  </tr>\r\n\r\n  @for (dessert of sortedData; track dessert) {\r\n    <tr>\r\n      <td>{{dessert.name}}</td>\r\n      <td>{{dessert.calories}}</td>\r\n      <td>{{dessert.fat}}</td>\r\n      <td>{{dessert.carbs}}</td>\r\n      <td>{{dessert.protein}}</td>\r\n    </tr>\r\n  }\r\n</table>\r\n","import {Component} from '@angular/core';\r\nimport {Sort, MatSortModule} from '@angular/material/sort';\r\n\r\n/**\r\n * @title Testing with MatSortHarness\r\n */\r\n@Component({\r\n  selector: 'sort-harness-example',\r\n  templateUrl: 'sort-harness-example.html',\r\n  standalone: true,\r\n  imports: [MatSortModule],\r\n})\r\nexport class SortHarnessExample {\r\n  disableThirdHeader = false;\r\n  desserts = [\r\n    {name: 'Frozen yogurt', calories: 159, fat: 6, carbs: 24, protein: 4},\r\n    {name: 'Ice cream sandwich', calories: 237, fat: 9, carbs: 37, protein: 4},\r\n    {name: 'Eclair', calories: 262, fat: 16, carbs: 24, protein: 6},\r\n    {name: 'Cupcake', calories: 305, fat: 4, carbs: 67, protein: 4},\r\n    {name: 'Gingerbread', calories: 356, fat: 16, carbs: 49, protein: 4},\r\n  ];\r\n\r\n  sortedData = this.desserts.slice();\r\n\r\n  sortData(sort: Sort) {\r\n    const data = this.desserts.slice();\r\n\r\n    if (!sort.active || sort.direction === '') {\r\n      this.sortedData = data;\r\n    } else {\r\n      this.sortedData = data.sort((a, b) => {\r\n        const aValue = (a as any)[sort.active];\r\n        const bValue = (b as any)[sort.active];\r\n        return (aValue < bValue ? -1 : 1) * (sort.direction === 'asc' ? 1 : -1);\r\n      });\r\n    }\r\n  }\r\n}\r\n","<table matSort (matSortChange)=\"sortData($event)\">\r\n  <tr>\r\n    <th mat-sort-header=\"name\">Dessert</th>\r\n    <th mat-sort-header=\"calories\">Calories</th>\r\n    <th mat-sort-header=\"fat\" [disabled]=\"disableThirdHeader\">Fat</th>\r\n    <th mat-sort-header=\"carbs\">Carbs</th>\r\n    <th mat-sort-header=\"protein\">Protein</th>\r\n  </tr>\r\n\r\n  @for (dessert of sortedData; track dessert) {\r\n    <tr>\r\n      <td>{{dessert.name}}</td>\r\n      <td>{{dessert.calories}}</td>\r\n      <td>{{dessert.fat}}</td>\r\n      <td>{{dessert.carbs}}</td>\r\n      <td>{{dessert.protein}}</td>\r\n    </tr>\r\n  }\r\n</table>\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}