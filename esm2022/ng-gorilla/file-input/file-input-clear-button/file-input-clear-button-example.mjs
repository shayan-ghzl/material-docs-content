import { Component } from '@angular/core';
import { FormControl, ReactiveFormsModule, Validators } from '@angular/forms';
import { MatButtonModule } from '@angular/material/button';
import { MatFormFieldModule } from '@angular/material/form-field';
import { FileValidator, GrlFileInputModule } from 'ng-gorilla/file-input';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@angular/material/form-field";
import * as i3 from "ng-gorilla/file-input";
import * as i4 from "@angular/material/button";
/**
 * @title File Input with a clear button
 */
export class FileInputClearButtonExample {
    constructor() {
        this.fileFormControl = new FormControl([], [Validators.required, FileValidator.maxContentSize(1048576)]);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.4", ngImport: i0, type: FileInputClearButtonExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.0.4", type: FileInputClearButtonExample, isStandalone: true, selector: "file-input-clear-button-example", ngImport: i0, template: "<form class=\"example-form\">\r\n\r\n  <mat-form-field class=\"example-file-input\" appearance=\"outline\">\r\n    <mat-label>Documents</mat-label>\r\n    <grl-file-input #fileInput [multiple]=\"true\" [formControl]=\"fileFormControl\" placeholder=\"Upload you docs here\"></grl-file-input>\r\n    <button type=\"button\" matSuffix mat-flat-button color=\"primary\" [grlFileInputButtonFor]=\"fileInput\" [grlFileInputAction]=\"'clear'\">Clear</button>\r\n    <mat-hint>You can upload just a single image</mat-hint>\r\n    @if (fileFormControl.hasError('maxContentSize')) {\r\n    <mat-error>The file size should not be more than {{1048576 | byteFormat}}</mat-error>\r\n    }\r\n    @if (fileFormControl.hasError('required')) {\r\n    <mat-error>This field is <strong>required</strong></mat-error>\r\n    }\r\n  </mat-form-field>\r\n\r\n  <button class=\"upload-button-outside\" type=\"button\" mat-flat-button color=\"primary\" [grlFileInputButtonFor]=\"fileInput\">Upload</button>\r\n\r\n</form>", styles: [".example-file-input.mat-mdc-form-field-has-icon-suffix .mat-mdc-text-field-wrapper {\r\n  padding-right: 16px;\r\n}\r\n\r\n.upload-button-outside.mdc-button {\r\n  display: block;\r\n  margin-top: 32px;\r\n}"], dependencies: [{ kind: "ngmodule", type: ReactiveFormsModule }, { kind: "directive", type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i1.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "ngmodule", type: MatFormFieldModule }, { kind: "component", type: i2.MatFormField, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "directive", type: i2.MatLabel, selector: "mat-label" }, { kind: "directive", type: i2.MatHint, selector: "mat-hint", inputs: ["align", "id"] }, { kind: "directive", type: i2.MatError, selector: "mat-error, [matError]", inputs: ["id"] }, { kind: "directive", type: i2.MatSuffix, selector: "[matSuffix], [matIconSuffix], [matTextSuffix]", inputs: ["matTextSuffix"] }, { kind: "ngmodule", type: GrlFileInputModule }, { kind: "component", type: i3.GrlFileInput, selector: "grl-file-input", inputs: ["disabled", "tabIndex", "multiple", "accept", "maxContentSize", "value", "errorStateMatcher", "id", "placeholder", "aria-describedby", "role"] }, { kind: "directive", type: i3.GrlFileInputButton, selector: "button[grlFileInputButtonFor]", inputs: ["grlFileInputButtonFor", "grlFileInputAction", "disabled"], exportAs: ["grlFileInputButton", "grlFileInputButtonFor"] }, { kind: "pipe", type: i3.ByteFormatPipe, name: "byteFormat" }, { kind: "ngmodule", type: MatButtonModule }, { kind: "component", type: i4.MatButton, selector: "    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  ", exportAs: ["matButton"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.4", ngImport: i0, type: FileInputClearButtonExample, decorators: [{
            type: Component,
            args: [{ selector: 'file-input-clear-button-example', standalone: true, imports: [ReactiveFormsModule, MatFormFieldModule, GrlFileInputModule, MatButtonModule], template: "<form class=\"example-form\">\r\n\r\n  <mat-form-field class=\"example-file-input\" appearance=\"outline\">\r\n    <mat-label>Documents</mat-label>\r\n    <grl-file-input #fileInput [multiple]=\"true\" [formControl]=\"fileFormControl\" placeholder=\"Upload you docs here\"></grl-file-input>\r\n    <button type=\"button\" matSuffix mat-flat-button color=\"primary\" [grlFileInputButtonFor]=\"fileInput\" [grlFileInputAction]=\"'clear'\">Clear</button>\r\n    <mat-hint>You can upload just a single image</mat-hint>\r\n    @if (fileFormControl.hasError('maxContentSize')) {\r\n    <mat-error>The file size should not be more than {{1048576 | byteFormat}}</mat-error>\r\n    }\r\n    @if (fileFormControl.hasError('required')) {\r\n    <mat-error>This field is <strong>required</strong></mat-error>\r\n    }\r\n  </mat-form-field>\r\n\r\n  <button class=\"upload-button-outside\" type=\"button\" mat-flat-button color=\"primary\" [grlFileInputButtonFor]=\"fileInput\">Upload</button>\r\n\r\n</form>", styles: [".example-file-input.mat-mdc-form-field-has-icon-suffix .mat-mdc-text-field-wrapper {\r\n  padding-right: 16px;\r\n}\r\n\r\n.upload-button-outside.mdc-button {\r\n  display: block;\r\n  margin-top: 32px;\r\n}"] }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS1pbnB1dC1jbGVhci1idXR0b24tZXhhbXBsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9uZy1nb3JpbGxhLWRvY3VtZW50cy9uZy1nb3JpbGxhL2ZpbGUtaW5wdXQvZmlsZS1pbnB1dC1jbGVhci1idXR0b24vZmlsZS1pbnB1dC1jbGVhci1idXR0b24tZXhhbXBsZS50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9uZy1nb3JpbGxhLWRvY3VtZW50cy9uZy1nb3JpbGxhL2ZpbGUtaW5wdXQvZmlsZS1pbnB1dC1jbGVhci1idXR0b24vZmlsZS1pbnB1dC1jbGVhci1idXR0b24tZXhhbXBsZS5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxtQkFBbUIsRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM5RSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDM0QsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDbEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDOzs7Ozs7QUFFMUU7O0dBRUc7QUFRSCxNQUFNLE9BQU8sMkJBQTJCO0lBUHhDO1FBU0Usb0JBQWUsR0FBRyxJQUFJLFdBQVcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLGFBQWEsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBRXJHOzhHQUpZLDJCQUEyQjtrR0FBM0IsMkJBQTJCLDJGQ2hCeEMscytCQWlCTyx3UURISyxtQkFBbUIsOGpCQUFFLGtCQUFrQixnbUJBQUUsa0JBQWtCLCtoQkFBRSxlQUFlOzsyRkFFM0UsMkJBQTJCO2tCQVB2QyxTQUFTOytCQUNFLGlDQUFpQyxjQUcvQixJQUFJLFdBQ1AsQ0FBQyxtQkFBbUIsRUFBRSxrQkFBa0IsRUFBRSxrQkFBa0IsRUFBRSxlQUFlLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRm9ybUNvbnRyb2wsIFJlYWN0aXZlRm9ybXNNb2R1bGUsIFZhbGlkYXRvcnMgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCB7IE1hdEJ1dHRvbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2J1dHRvbic7XHJcbmltcG9ydCB7IE1hdEZvcm1GaWVsZE1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2Zvcm0tZmllbGQnO1xyXG5pbXBvcnQgeyBGaWxlVmFsaWRhdG9yLCBHcmxGaWxlSW5wdXRNb2R1bGUgfSBmcm9tICduZy1nb3JpbGxhL2ZpbGUtaW5wdXQnO1xyXG5cclxuLyoqXHJcbiAqIEB0aXRsZSBGaWxlIElucHV0IHdpdGggYSBjbGVhciBidXR0b25cclxuICovXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnZmlsZS1pbnB1dC1jbGVhci1idXR0b24tZXhhbXBsZScsXHJcbiAgc3R5bGVVcmxzOiBbJ2ZpbGUtaW5wdXQtY2xlYXItYnV0dG9uLWV4YW1wbGUuY3NzJ10sXHJcbiAgdGVtcGxhdGVVcmw6ICdmaWxlLWlucHV0LWNsZWFyLWJ1dHRvbi1leGFtcGxlLmh0bWwnLFxyXG4gIHN0YW5kYWxvbmU6IHRydWUsXHJcbiAgaW1wb3J0czogW1JlYWN0aXZlRm9ybXNNb2R1bGUsIE1hdEZvcm1GaWVsZE1vZHVsZSwgR3JsRmlsZUlucHV0TW9kdWxlLCBNYXRCdXR0b25Nb2R1bGVdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgRmlsZUlucHV0Q2xlYXJCdXR0b25FeGFtcGxlIHtcclxuXHJcbiAgZmlsZUZvcm1Db250cm9sID0gbmV3IEZvcm1Db250cm9sKFtdLCBbVmFsaWRhdG9ycy5yZXF1aXJlZCwgRmlsZVZhbGlkYXRvci5tYXhDb250ZW50U2l6ZSgxMDQ4NTc2KV0pO1xyXG5cclxufVxyXG4iLCI8Zm9ybSBjbGFzcz1cImV4YW1wbGUtZm9ybVwiPlxyXG5cclxuICA8bWF0LWZvcm0tZmllbGQgY2xhc3M9XCJleGFtcGxlLWZpbGUtaW5wdXRcIiBhcHBlYXJhbmNlPVwib3V0bGluZVwiPlxyXG4gICAgPG1hdC1sYWJlbD5Eb2N1bWVudHM8L21hdC1sYWJlbD5cclxuICAgIDxncmwtZmlsZS1pbnB1dCAjZmlsZUlucHV0IFttdWx0aXBsZV09XCJ0cnVlXCIgW2Zvcm1Db250cm9sXT1cImZpbGVGb3JtQ29udHJvbFwiIHBsYWNlaG9sZGVyPVwiVXBsb2FkIHlvdSBkb2NzIGhlcmVcIj48L2dybC1maWxlLWlucHV0PlxyXG4gICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgbWF0U3VmZml4IG1hdC1mbGF0LWJ1dHRvbiBjb2xvcj1cInByaW1hcnlcIiBbZ3JsRmlsZUlucHV0QnV0dG9uRm9yXT1cImZpbGVJbnB1dFwiIFtncmxGaWxlSW5wdXRBY3Rpb25dPVwiJ2NsZWFyJ1wiPkNsZWFyPC9idXR0b24+XHJcbiAgICA8bWF0LWhpbnQ+WW91IGNhbiB1cGxvYWQganVzdCBhIHNpbmdsZSBpbWFnZTwvbWF0LWhpbnQ+XHJcbiAgICBAaWYgKGZpbGVGb3JtQ29udHJvbC5oYXNFcnJvcignbWF4Q29udGVudFNpemUnKSkge1xyXG4gICAgPG1hdC1lcnJvcj5UaGUgZmlsZSBzaXplIHNob3VsZCBub3QgYmUgbW9yZSB0aGFuIHt7MTA0ODU3NiB8IGJ5dGVGb3JtYXR9fTwvbWF0LWVycm9yPlxyXG4gICAgfVxyXG4gICAgQGlmIChmaWxlRm9ybUNvbnRyb2wuaGFzRXJyb3IoJ3JlcXVpcmVkJykpIHtcclxuICAgIDxtYXQtZXJyb3I+VGhpcyBmaWVsZCBpcyA8c3Ryb25nPnJlcXVpcmVkPC9zdHJvbmc+PC9tYXQtZXJyb3I+XHJcbiAgICB9XHJcbiAgPC9tYXQtZm9ybS1maWVsZD5cclxuXHJcbiAgPGJ1dHRvbiBjbGFzcz1cInVwbG9hZC1idXR0b24tb3V0c2lkZVwiIHR5cGU9XCJidXR0b25cIiBtYXQtZmxhdC1idXR0b24gY29sb3I9XCJwcmltYXJ5XCIgW2dybEZpbGVJbnB1dEJ1dHRvbkZvcl09XCJmaWxlSW5wdXRcIj5VcGxvYWQ8L2J1dHRvbj5cclxuXHJcbjwvZm9ybT4iXX0=