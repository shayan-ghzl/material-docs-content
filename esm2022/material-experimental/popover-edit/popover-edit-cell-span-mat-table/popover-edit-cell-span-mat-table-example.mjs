import { Component } from '@angular/core';
import { DataSource } from '@angular/cdk/collections';
import { FormsModule } from '@angular/forms';
import { MatIconModule } from '@angular/material/icon';
import { MatButtonModule } from '@angular/material/button';
import { MatInputModule } from '@angular/material/input';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatPopoverEditModule } from '@angular/material-experimental/popover-edit';
import { CdkPopoverEditModule } from '@angular/cdk-experimental/popover-edit';
import { MatTableModule } from '@angular/material/table';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/table";
import * as i2 from "@angular/cdk-experimental/popover-edit";
import * as i3 from "@angular/forms";
import * as i4 from "@angular/material-experimental/popover-edit";
import * as i5 from "@angular/material/form-field";
import * as i6 from "@angular/material/input";
import * as i7 from "@angular/material/button";
import * as i8 from "@angular/material/icon";
const PERSON_DATA = [
    { id: 1, firstName: 'Terra', middleName: 'Maduin', lastName: 'Branford' },
    { id: 2, firstName: 'Locke', middleName: '', lastName: 'Cole' },
    { id: 3, firstName: 'Celes', middleName: 'Gestahl', lastName: 'Chere' },
    { id: 4, firstName: 'Edgar', middleName: 'Roni', lastName: 'Figaro' },
    { id: 5, firstName: 'Sabin', middleName: 'Rene', lastName: 'Figaro' },
    { id: 6, firstName: 'Clyde', middleName: '"Shadow"', lastName: 'Arrowny' },
    { id: 7, firstName: 'Setzer', middleName: '', lastName: 'Gabbiani' },
    { id: 8, firstName: 'Cid', middleName: 'Del Norte', lastName: 'Marquez' },
    { id: 9, firstName: 'Mog', middleName: '', lastName: 'McMoogle' },
];
/**
 * @title Material Popover Edit spanning multiple columns on a Material data-table
 */
export class PopoverEditCellSpanMatTableExample {
    constructor() {
        this.displayedColumns = ['id', 'firstName', 'middleName', 'lastName'];
        this.dataSource = new ExampleDataSource();
        this.preservedValues = new WeakMap();
    }
    onSubmit(person, f) {
        if (!f.valid) {
            return;
        }
        person.firstName = f.value['firstName'];
        person.middleName = f.value['middleName'];
        person.lastName = f.value['lastName'];
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.4", ngImport: i0, type: PopoverEditCellSpanMatTableExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.0.4", type: PopoverEditCellSpanMatTableExample, isStandalone: true, selector: "popover-edit-cell-span-mat-table-example", ngImport: i0, template: "<table class=\"example-table\" mat-table editable [dataSource]=\"dataSource\">\r\n  <ng-template #nameEdit let-ctx>\r\n    <div>\r\n      <form #f=\"ngForm\"\r\n          matEditLens\r\n          (ngSubmit)=\"onSubmit(ctx.person, f)\"\r\n          [matEditLensPreservedFormValue]=\"preservedValues.get(ctx.person)\"\r\n          (matEditLensPreservedFormValueChange)=\"preservedValues.set(ctx.person, $event)\">\r\n        <div mat-edit-content class=\"example-input-container\">\r\n          <mat-form-field>\r\n            <input matInput [ngModel]=\"ctx.person.firstName\" name=\"firstName\" required\r\n                [attr.cdkFocusInitial]=\"ctx.focus === 'firstName' || null\">\r\n          </mat-form-field>\r\n          <mat-form-field>\r\n            <input matInput [ngModel]=\"ctx.person.middleName\" name=\"middleName\"\r\n                [attr.cdkFocusInitial]=\"ctx.focus === 'middleName' || null\">\r\n          </mat-form-field>\r\n          <mat-form-field>\r\n            <input matInput [ngModel]=\"ctx.person.lastName\" name=\"lastName\" required\r\n                [attr.cdkFocusInitial]=\"ctx.focus === 'lastName' || null\">\r\n          </mat-form-field>\r\n        </div>\r\n\r\n        <div mat-edit-actions>\r\n          <button mat-button type=\"submit\">Confirm</button>\r\n          <button mat-button cdkEditRevert>Revert</button>\r\n          <button mat-button cdkEditClose>Close</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </ng-template>\r\n\r\n  <!-- Position Column -->\r\n  <ng-container matColumnDef=\"id\">\r\n    <th mat-header-cell *matHeaderCellDef> No. </th>\r\n    <td mat-cell *matCellDef=\"let person\"> {{person.id}} </td>\r\n  </ng-container>\r\n\r\n  <!-- Name Column -->\r\n  <ng-container matColumnDef=\"firstName\">\r\n    <th mat-header-cell *matHeaderCellDef> First Name </th>\r\n    <td mat-cell *matCellDef=\"let person\"\r\n        [matPopoverEdit]=\"nameEdit\"\r\n        [matPopoverEditContext]=\"{person: person, focus: 'firstName'}\"\r\n        [matPopoverEditColspan]=\"{after: 2}\">\r\n      {{person.firstName}}\r\n\r\n      <span *matRowHoverContent>\r\n        <button mat-icon-button matEditOpen><mat-icon>edit</mat-icon></button>\r\n      </span>\r\n    </td>\r\n  </ng-container>\r\n\r\n  <!-- Weight Column -->\r\n  <ng-container matColumnDef=\"middleName\">\r\n    <th mat-header-cell *matHeaderCellDef> Middle Name </th>\r\n    <td mat-cell *matCellDef=\"let person\"\r\n        [matPopoverEdit]=\"nameEdit\"\r\n        [matPopoverEditContext]=\"{person: person, focus: 'middleName'}\"\r\n        [matPopoverEditColspan]=\"{before:1 , after: 1}\">\r\n      {{person.middleName}}\r\n\r\n      <span *matRowHoverContent>\r\n        <button mat-icon-button matEditOpen><mat-icon>edit</mat-icon></button>\r\n      </span>\r\n    </td>\r\n  </ng-container>\r\n\r\n  <!-- Symbol Column -->\r\n  <ng-container matColumnDef=\"lastName\">\r\n    <th mat-header-cell *matHeaderCellDef> Last Name </th>\r\n    <td mat-cell *matCellDef=\"let person\"\r\n        [matPopoverEdit]=\"nameEdit\"\r\n        [matPopoverEditContext]=\"{person: person, focus: 'lastName'}\"\r\n        [matPopoverEditColspan]=\"{before: 2}\">\r\n      {{person.lastName}}\r\n\r\n      <span *matRowHoverContent>\r\n        <button mat-icon-button matEditOpen><mat-icon>edit</mat-icon></button>\r\n      </span>\r\n    </td>\r\n  </ng-container>\r\n\r\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n</table>\r\n", styles: [".example-table {\r\n  width: 100%;\r\n}\r\n\r\n.example-table th {\r\n  text-align: left;\r\n}\r\n\r\n.example-table td,\r\n.example-table th {\r\n  min-width: 300px;\r\n  width: 25%;\r\n}\r\n\r\n.example-input-container {\r\n  display: flex;\r\n  justify-content: stretch;\r\n}\r\n\r\n.example-input-container mat-form-field {\r\n  flex: 1;\r\n}\r\n"], dependencies: [{ kind: "ngmodule", type: MatTableModule }, { kind: "component", type: i1.MatTable, selector: "mat-table, table[mat-table]", exportAs: ["matTable"] }, { kind: "directive", type: i1.MatHeaderCellDef, selector: "[matHeaderCellDef]" }, { kind: "directive", type: i1.MatHeaderRowDef, selector: "[matHeaderRowDef]", inputs: ["matHeaderRowDef", "matHeaderRowDefSticky"] }, { kind: "directive", type: i1.MatColumnDef, selector: "[matColumnDef]", inputs: ["sticky", "matColumnDef"] }, { kind: "directive", type: i1.MatCellDef, selector: "[matCellDef]" }, { kind: "directive", type: i1.MatRowDef, selector: "[matRowDef]", inputs: ["matRowDefColumns", "matRowDefWhen"] }, { kind: "directive", type: i1.MatHeaderCell, selector: "mat-header-cell, th[mat-header-cell]" }, { kind: "directive", type: i1.MatCell, selector: "mat-cell, td[mat-cell]" }, { kind: "component", type: i1.MatHeaderRow, selector: "mat-header-row, tr[mat-header-row]", exportAs: ["matHeaderRow"] }, { kind: "component", type: i1.MatRow, selector: "mat-row, tr[mat-row]", exportAs: ["matRow"] }, { kind: "ngmodule", type: CdkPopoverEditModule }, { kind: "directive", type: i2.CdkEditRevert, selector: "button[cdkEditRevert]", inputs: ["type"] }, { kind: "directive", type: i2.CdkEditClose, selector: "[cdkEditClose]" }, { kind: "directive", type: i2.CdkEditable, selector: "table[editable], cdk-table[editable], mat-table[editable]" }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i3.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i3.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "ngmodule", type: MatPopoverEditModule }, { kind: "directive", type: i4.MatPopoverEdit, selector: "[matPopoverEdit]:not([matPopoverEditTabOut])", inputs: ["matPopoverEdit", "matPopoverEditContext", "matPopoverEditColspan", "matPopoverEditDisabled"] }, { kind: "directive", type: i4.MatRowHoverContent, selector: "[matRowHoverContent]" }, { kind: "directive", type: i4.MatEditLens, selector: "form[matEditLens]", inputs: ["matEditLensClickOutBehavior", "matEditLensPreservedFormValue", "matEditLensIgnoreSubmitUnlessValid"], outputs: ["matEditLensPreservedFormValueChange"] }, { kind: "directive", type: i4.MatEditOpen, selector: "[matEditOpen]" }, { kind: "ngmodule", type: MatFormFieldModule }, { kind: "component", type: i5.MatFormField, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "ngmodule", type: MatInputModule }, { kind: "directive", type: i6.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "name", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly"], exportAs: ["matInput"] }, { kind: "ngmodule", type: MatButtonModule }, { kind: "component", type: i7.MatButton, selector: "    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  ", exportAs: ["matButton"] }, { kind: "component", type: i7.MatIconButton, selector: "button[mat-icon-button]", exportAs: ["matButton"] }, { kind: "ngmodule", type: MatIconModule }, { kind: "component", type: i8.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.4", ngImport: i0, type: PopoverEditCellSpanMatTableExample, decorators: [{
            type: Component,
            args: [{ selector: 'popover-edit-cell-span-mat-table-example', standalone: true, imports: [
                        MatTableModule,
                        CdkPopoverEditModule,
                        FormsModule,
                        MatPopoverEditModule,
                        MatFormFieldModule,
                        MatInputModule,
                        MatButtonModule,
                        MatIconModule,
                    ], template: "<table class=\"example-table\" mat-table editable [dataSource]=\"dataSource\">\r\n  <ng-template #nameEdit let-ctx>\r\n    <div>\r\n      <form #f=\"ngForm\"\r\n          matEditLens\r\n          (ngSubmit)=\"onSubmit(ctx.person, f)\"\r\n          [matEditLensPreservedFormValue]=\"preservedValues.get(ctx.person)\"\r\n          (matEditLensPreservedFormValueChange)=\"preservedValues.set(ctx.person, $event)\">\r\n        <div mat-edit-content class=\"example-input-container\">\r\n          <mat-form-field>\r\n            <input matInput [ngModel]=\"ctx.person.firstName\" name=\"firstName\" required\r\n                [attr.cdkFocusInitial]=\"ctx.focus === 'firstName' || null\">\r\n          </mat-form-field>\r\n          <mat-form-field>\r\n            <input matInput [ngModel]=\"ctx.person.middleName\" name=\"middleName\"\r\n                [attr.cdkFocusInitial]=\"ctx.focus === 'middleName' || null\">\r\n          </mat-form-field>\r\n          <mat-form-field>\r\n            <input matInput [ngModel]=\"ctx.person.lastName\" name=\"lastName\" required\r\n                [attr.cdkFocusInitial]=\"ctx.focus === 'lastName' || null\">\r\n          </mat-form-field>\r\n        </div>\r\n\r\n        <div mat-edit-actions>\r\n          <button mat-button type=\"submit\">Confirm</button>\r\n          <button mat-button cdkEditRevert>Revert</button>\r\n          <button mat-button cdkEditClose>Close</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </ng-template>\r\n\r\n  <!-- Position Column -->\r\n  <ng-container matColumnDef=\"id\">\r\n    <th mat-header-cell *matHeaderCellDef> No. </th>\r\n    <td mat-cell *matCellDef=\"let person\"> {{person.id}} </td>\r\n  </ng-container>\r\n\r\n  <!-- Name Column -->\r\n  <ng-container matColumnDef=\"firstName\">\r\n    <th mat-header-cell *matHeaderCellDef> First Name </th>\r\n    <td mat-cell *matCellDef=\"let person\"\r\n        [matPopoverEdit]=\"nameEdit\"\r\n        [matPopoverEditContext]=\"{person: person, focus: 'firstName'}\"\r\n        [matPopoverEditColspan]=\"{after: 2}\">\r\n      {{person.firstName}}\r\n\r\n      <span *matRowHoverContent>\r\n        <button mat-icon-button matEditOpen><mat-icon>edit</mat-icon></button>\r\n      </span>\r\n    </td>\r\n  </ng-container>\r\n\r\n  <!-- Weight Column -->\r\n  <ng-container matColumnDef=\"middleName\">\r\n    <th mat-header-cell *matHeaderCellDef> Middle Name </th>\r\n    <td mat-cell *matCellDef=\"let person\"\r\n        [matPopoverEdit]=\"nameEdit\"\r\n        [matPopoverEditContext]=\"{person: person, focus: 'middleName'}\"\r\n        [matPopoverEditColspan]=\"{before:1 , after: 1}\">\r\n      {{person.middleName}}\r\n\r\n      <span *matRowHoverContent>\r\n        <button mat-icon-button matEditOpen><mat-icon>edit</mat-icon></button>\r\n      </span>\r\n    </td>\r\n  </ng-container>\r\n\r\n  <!-- Symbol Column -->\r\n  <ng-container matColumnDef=\"lastName\">\r\n    <th mat-header-cell *matHeaderCellDef> Last Name </th>\r\n    <td mat-cell *matCellDef=\"let person\"\r\n        [matPopoverEdit]=\"nameEdit\"\r\n        [matPopoverEditContext]=\"{person: person, focus: 'lastName'}\"\r\n        [matPopoverEditColspan]=\"{before: 2}\">\r\n      {{person.lastName}}\r\n\r\n      <span *matRowHoverContent>\r\n        <button mat-icon-button matEditOpen><mat-icon>edit</mat-icon></button>\r\n      </span>\r\n    </td>\r\n  </ng-container>\r\n\r\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n</table>\r\n", styles: [".example-table {\r\n  width: 100%;\r\n}\r\n\r\n.example-table th {\r\n  text-align: left;\r\n}\r\n\r\n.example-table td,\r\n.example-table th {\r\n  min-width: 300px;\r\n  width: 25%;\r\n}\r\n\r\n.example-input-container {\r\n  display: flex;\r\n  justify-content: stretch;\r\n}\r\n\r\n.example-input-container mat-form-field {\r\n  flex: 1;\r\n}\r\n"] }]
        }] });
/**
 * Data source to provide what data should be rendered in the table. Note that the data source
 * can retrieve its data in any way. In this case, the data source is provided a reference
 * to a common data base, ExampleDatabase. It is not the data source's responsibility to manage
 * the underlying data. Instead, it only needs to take the data and send the table exactly what
 * should be rendered.
 */
export class ExampleDataSource extends DataSource {
    constructor() {
        super(...arguments);
        /** Stream of data that is provided to the table. */
        this.data = new BehaviorSubject(PERSON_DATA);
    }
    /** Connect function called by the table to retrieve one stream containing the data to render. */
    connect() {
        return this.data;
    }
    disconnect() { }
}
//# sourceMappingURL=data:application/json;base64,