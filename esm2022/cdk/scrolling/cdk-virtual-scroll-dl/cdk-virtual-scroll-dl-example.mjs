import { ChangeDetectionStrategy, Component } from '@angular/core';
import { ScrollingModule } from '@angular/cdk/scrolling';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/scrolling";
/** @title Virtual scrolling `<dl>` */
export class CdkVirtualScrollDlExample {
    constructor() {
        this.states = [
            { name: 'Alabama', capital: 'Montgomery' },
            { name: 'Alaska', capital: 'Juneau' },
            { name: 'Arizona', capital: 'Phoenix' },
            { name: 'Arkansas', capital: 'Little Rock' },
            { name: 'California', capital: 'Sacramento' },
            { name: 'Colorado', capital: 'Denver' },
            { name: 'Connecticut', capital: 'Hartford' },
            { name: 'Delaware', capital: 'Dover' },
            { name: 'Florida', capital: 'Tallahassee' },
            { name: 'Georgia', capital: 'Atlanta' },
            { name: 'Hawaii', capital: 'Honolulu' },
            { name: 'Idaho', capital: 'Boise' },
            { name: 'Illinois', capital: 'Springfield' },
            { name: 'Indiana', capital: 'Indianapolis' },
            { name: 'Iowa', capital: 'Des Moines' },
            { name: 'Kansas', capital: 'Topeka' },
            { name: 'Kentucky', capital: 'Frankfort' },
            { name: 'Louisiana', capital: 'Baton Rouge' },
            { name: 'Maine', capital: 'Augusta' },
            { name: 'Maryland', capital: 'Annapolis' },
            { name: 'Massachusetts', capital: 'Boston' },
            { name: 'Michigan', capital: 'Lansing' },
            { name: 'Minnesota', capital: 'St. Paul' },
            { name: 'Mississippi', capital: 'Jackson' },
            { name: 'Missouri', capital: 'Jefferson City' },
            { name: 'Montana', capital: 'Helena' },
            { name: 'Nebraska', capital: 'Lincoln' },
            { name: 'Nevada', capital: 'Carson City' },
            { name: 'New Hampshire', capital: 'Concord' },
            { name: 'New Jersey', capital: 'Trenton' },
            { name: 'New Mexico', capital: 'Santa Fe' },
            { name: 'New York', capital: 'Albany' },
            { name: 'North Carolina', capital: 'Raleigh' },
            { name: 'North Dakota', capital: 'Bismarck' },
            { name: 'Ohio', capital: 'Columbus' },
            { name: 'Oklahoma', capital: 'Oklahoma City' },
            { name: 'Oregon', capital: 'Salem' },
            { name: 'Pennsylvania', capital: 'Harrisburg' },
            { name: 'Rhode Island', capital: 'Providence' },
            { name: 'South Carolina', capital: 'Columbia' },
            { name: 'South Dakota', capital: 'Pierre' },
            { name: 'Tennessee', capital: 'Nashville' },
            { name: 'Texas', capital: 'Austin' },
            { name: 'Utah', capital: 'Salt Lake City' },
            { name: 'Vermont', capital: 'Montpelier' },
            { name: 'Virginia', capital: 'Richmond' },
            { name: 'Washington', capital: 'Olympia' },
            { name: 'West Virginia', capital: 'Charleston' },
            { name: 'Wisconsin', capital: 'Madison' },
            { name: 'Wyoming', capital: 'Cheyenne' },
        ];
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.4", ngImport: i0, type: CdkVirtualScrollDlExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.0.4", type: CdkVirtualScrollDlExample, isStandalone: true, selector: "cdk-virtual-scroll-dl-example", ngImport: i0, template: "<cdk-virtual-scroll-viewport class=\"example-viewport\" itemSize=\"60\">\r\n  <dl class=\"example-dl\">\r\n    <ng-container *cdkVirtualFor=\"let state of states\">\r\n      <dt class=\"example-dt\">{{state.name}}</dt>\r\n      <dd class=\"example-dd\">{{state.capital}}</dd>\r\n    </ng-container>\r\n  </dl>\r\n</cdk-virtual-scroll-viewport>\r\n", styles: [".example-viewport {\r\n  height: 200px;\r\n  width: 200px;\r\n  border: 1px solid black;\r\n}\r\n\r\n.example-dt {\r\n  height: 30px;\r\n  font-weight: bold;\r\n}\r\n\r\n.example-dd {\r\n  height: 30px;\r\n}\r\n"], dependencies: [{ kind: "ngmodule", type: ScrollingModule }, { kind: "directive", type: i1.CdkFixedSizeVirtualScroll, selector: "cdk-virtual-scroll-viewport[itemSize]", inputs: ["itemSize", "minBufferPx", "maxBufferPx"] }, { kind: "directive", type: i1.CdkVirtualForOf, selector: "[cdkVirtualFor][cdkVirtualForOf]", inputs: ["cdkVirtualForOf", "cdkVirtualForTrackBy", "cdkVirtualForTemplate", "cdkVirtualForTemplateCacheSize"] }, { kind: "component", type: i1.CdkVirtualScrollViewport, selector: "cdk-virtual-scroll-viewport", inputs: ["orientation", "appendOnly"], outputs: ["scrolledIndexChange"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.4", ngImport: i0, type: CdkVirtualScrollDlExample, decorators: [{
            type: Component,
            args: [{ selector: 'cdk-virtual-scroll-dl-example', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [ScrollingModule], template: "<cdk-virtual-scroll-viewport class=\"example-viewport\" itemSize=\"60\">\r\n  <dl class=\"example-dl\">\r\n    <ng-container *cdkVirtualFor=\"let state of states\">\r\n      <dt class=\"example-dt\">{{state.name}}</dt>\r\n      <dd class=\"example-dd\">{{state.capital}}</dd>\r\n    </ng-container>\r\n  </dl>\r\n</cdk-virtual-scroll-viewport>\r\n", styles: [".example-viewport {\r\n  height: 200px;\r\n  width: 200px;\r\n  border: 1px solid black;\r\n}\r\n\r\n.example-dt {\r\n  height: 30px;\r\n  font-weight: bold;\r\n}\r\n\r\n.example-dd {\r\n  height: 30px;\r\n}\r\n"] }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RrLXZpcnR1YWwtc2Nyb2xsLWRsLWV4YW1wbGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy1leGFtcGxlcy9jZGsvc2Nyb2xsaW5nL2Nkay12aXJ0dWFsLXNjcm9sbC1kbC9jZGstdmlydHVhbC1zY3JvbGwtZGwtZXhhbXBsZS50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzLWV4YW1wbGVzL2Nkay9zY3JvbGxpbmcvY2RrLXZpcnR1YWwtc2Nyb2xsLWRsL2Nkay12aXJ0dWFsLXNjcm9sbC1kbC1leGFtcGxlLmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLHVCQUF1QixFQUFFLFNBQVMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNqRSxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sd0JBQXdCLENBQUM7OztBQUV2RCxzQ0FBc0M7QUFTdEMsTUFBTSxPQUFPLHlCQUF5QjtJQVJ0QztRQVNFLFdBQU0sR0FBRztZQUNQLEVBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFDO1lBQ3hDLEVBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFDO1lBQ25DLEVBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFDO1lBQ3JDLEVBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFDO1lBQzFDLEVBQUMsSUFBSSxFQUFFLFlBQVksRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFDO1lBQzNDLEVBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFDO1lBQ3JDLEVBQUMsSUFBSSxFQUFFLGFBQWEsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFDO1lBQzFDLEVBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFDO1lBQ3BDLEVBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFDO1lBQ3pDLEVBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFDO1lBQ3JDLEVBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFDO1lBQ3JDLEVBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFDO1lBQ2pDLEVBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFDO1lBQzFDLEVBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFDO1lBQzFDLEVBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFDO1lBQ3JDLEVBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFDO1lBQ25DLEVBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFDO1lBQ3hDLEVBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFDO1lBQzNDLEVBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFDO1lBQ25DLEVBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFDO1lBQ3hDLEVBQUMsSUFBSSxFQUFFLGVBQWUsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFDO1lBQzFDLEVBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFDO1lBQ3RDLEVBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFDO1lBQ3hDLEVBQUMsSUFBSSxFQUFFLGFBQWEsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFDO1lBQ3pDLEVBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUM7WUFDN0MsRUFBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUM7WUFDcEMsRUFBQyxJQUFJLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUM7WUFDdEMsRUFBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUM7WUFDeEMsRUFBQyxJQUFJLEVBQUUsZUFBZSxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUM7WUFDM0MsRUFBQyxJQUFJLEVBQUUsWUFBWSxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUM7WUFDeEMsRUFBQyxJQUFJLEVBQUUsWUFBWSxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUM7WUFDekMsRUFBQyxJQUFJLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUM7WUFDckMsRUFBQyxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBQztZQUM1QyxFQUFDLElBQUksRUFBRSxjQUFjLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBQztZQUMzQyxFQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBQztZQUNuQyxFQUFDLElBQUksRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLGVBQWUsRUFBQztZQUM1QyxFQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBQztZQUNsQyxFQUFDLElBQUksRUFBRSxjQUFjLEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBQztZQUM3QyxFQUFDLElBQUksRUFBRSxjQUFjLEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBQztZQUM3QyxFQUFDLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFDO1lBQzdDLEVBQUMsSUFBSSxFQUFFLGNBQWMsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFDO1lBQ3pDLEVBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFDO1lBQ3pDLEVBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFDO1lBQ2xDLEVBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUM7WUFDekMsRUFBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUM7WUFDeEMsRUFBQyxJQUFJLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUM7WUFDdkMsRUFBQyxJQUFJLEVBQUUsWUFBWSxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUM7WUFDeEMsRUFBQyxJQUFJLEVBQUUsZUFBZSxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUM7WUFDOUMsRUFBQyxJQUFJLEVBQUUsV0FBVyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUM7WUFDdkMsRUFBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUM7U0FDdkMsQ0FBQztLQUNIOzhHQXJEWSx5QkFBeUI7a0dBQXpCLHlCQUF5Qix5RkNadEMsNlZBUUEsNFFERVksZUFBZTs7MkZBRWQseUJBQXlCO2tCQVJyQyxTQUFTOytCQUNFLCtCQUErQixtQkFHeEIsdUJBQXVCLENBQUMsTUFBTSxjQUNuQyxJQUFJLFdBQ1AsQ0FBQyxlQUFlLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge1Njcm9sbGluZ01vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvY2RrL3Njcm9sbGluZyc7XHJcblxyXG4vKiogQHRpdGxlIFZpcnR1YWwgc2Nyb2xsaW5nIGA8ZGw+YCAqL1xyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2Nkay12aXJ0dWFsLXNjcm9sbC1kbC1leGFtcGxlJyxcclxuICBzdHlsZVVybHM6IFsnY2RrLXZpcnR1YWwtc2Nyb2xsLWRsLWV4YW1wbGUuY3NzJ10sXHJcbiAgdGVtcGxhdGVVcmw6ICdjZGstdmlydHVhbC1zY3JvbGwtZGwtZXhhbXBsZS5odG1sJyxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcclxuICBzdGFuZGFsb25lOiB0cnVlLFxyXG4gIGltcG9ydHM6IFtTY3JvbGxpbmdNb2R1bGVdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgQ2RrVmlydHVhbFNjcm9sbERsRXhhbXBsZSB7XHJcbiAgc3RhdGVzID0gW1xyXG4gICAge25hbWU6ICdBbGFiYW1hJywgY2FwaXRhbDogJ01vbnRnb21lcnknfSxcclxuICAgIHtuYW1lOiAnQWxhc2thJywgY2FwaXRhbDogJ0p1bmVhdSd9LFxyXG4gICAge25hbWU6ICdBcml6b25hJywgY2FwaXRhbDogJ1Bob2VuaXgnfSxcclxuICAgIHtuYW1lOiAnQXJrYW5zYXMnLCBjYXBpdGFsOiAnTGl0dGxlIFJvY2snfSxcclxuICAgIHtuYW1lOiAnQ2FsaWZvcm5pYScsIGNhcGl0YWw6ICdTYWNyYW1lbnRvJ30sXHJcbiAgICB7bmFtZTogJ0NvbG9yYWRvJywgY2FwaXRhbDogJ0RlbnZlcid9LFxyXG4gICAge25hbWU6ICdDb25uZWN0aWN1dCcsIGNhcGl0YWw6ICdIYXJ0Zm9yZCd9LFxyXG4gICAge25hbWU6ICdEZWxhd2FyZScsIGNhcGl0YWw6ICdEb3Zlcid9LFxyXG4gICAge25hbWU6ICdGbG9yaWRhJywgY2FwaXRhbDogJ1RhbGxhaGFzc2VlJ30sXHJcbiAgICB7bmFtZTogJ0dlb3JnaWEnLCBjYXBpdGFsOiAnQXRsYW50YSd9LFxyXG4gICAge25hbWU6ICdIYXdhaWknLCBjYXBpdGFsOiAnSG9ub2x1bHUnfSxcclxuICAgIHtuYW1lOiAnSWRhaG8nLCBjYXBpdGFsOiAnQm9pc2UnfSxcclxuICAgIHtuYW1lOiAnSWxsaW5vaXMnLCBjYXBpdGFsOiAnU3ByaW5nZmllbGQnfSxcclxuICAgIHtuYW1lOiAnSW5kaWFuYScsIGNhcGl0YWw6ICdJbmRpYW5hcG9saXMnfSxcclxuICAgIHtuYW1lOiAnSW93YScsIGNhcGl0YWw6ICdEZXMgTW9pbmVzJ30sXHJcbiAgICB7bmFtZTogJ0thbnNhcycsIGNhcGl0YWw6ICdUb3Bla2EnfSxcclxuICAgIHtuYW1lOiAnS2VudHVja3knLCBjYXBpdGFsOiAnRnJhbmtmb3J0J30sXHJcbiAgICB7bmFtZTogJ0xvdWlzaWFuYScsIGNhcGl0YWw6ICdCYXRvbiBSb3VnZSd9LFxyXG4gICAge25hbWU6ICdNYWluZScsIGNhcGl0YWw6ICdBdWd1c3RhJ30sXHJcbiAgICB7bmFtZTogJ01hcnlsYW5kJywgY2FwaXRhbDogJ0FubmFwb2xpcyd9LFxyXG4gICAge25hbWU6ICdNYXNzYWNodXNldHRzJywgY2FwaXRhbDogJ0Jvc3Rvbid9LFxyXG4gICAge25hbWU6ICdNaWNoaWdhbicsIGNhcGl0YWw6ICdMYW5zaW5nJ30sXHJcbiAgICB7bmFtZTogJ01pbm5lc290YScsIGNhcGl0YWw6ICdTdC4gUGF1bCd9LFxyXG4gICAge25hbWU6ICdNaXNzaXNzaXBwaScsIGNhcGl0YWw6ICdKYWNrc29uJ30sXHJcbiAgICB7bmFtZTogJ01pc3NvdXJpJywgY2FwaXRhbDogJ0plZmZlcnNvbiBDaXR5J30sXHJcbiAgICB7bmFtZTogJ01vbnRhbmEnLCBjYXBpdGFsOiAnSGVsZW5hJ30sXHJcbiAgICB7bmFtZTogJ05lYnJhc2thJywgY2FwaXRhbDogJ0xpbmNvbG4nfSxcclxuICAgIHtuYW1lOiAnTmV2YWRhJywgY2FwaXRhbDogJ0NhcnNvbiBDaXR5J30sXHJcbiAgICB7bmFtZTogJ05ldyBIYW1wc2hpcmUnLCBjYXBpdGFsOiAnQ29uY29yZCd9LFxyXG4gICAge25hbWU6ICdOZXcgSmVyc2V5JywgY2FwaXRhbDogJ1RyZW50b24nfSxcclxuICAgIHtuYW1lOiAnTmV3IE1leGljbycsIGNhcGl0YWw6ICdTYW50YSBGZSd9LFxyXG4gICAge25hbWU6ICdOZXcgWW9yaycsIGNhcGl0YWw6ICdBbGJhbnknfSxcclxuICAgIHtuYW1lOiAnTm9ydGggQ2Fyb2xpbmEnLCBjYXBpdGFsOiAnUmFsZWlnaCd9LFxyXG4gICAge25hbWU6ICdOb3J0aCBEYWtvdGEnLCBjYXBpdGFsOiAnQmlzbWFyY2snfSxcclxuICAgIHtuYW1lOiAnT2hpbycsIGNhcGl0YWw6ICdDb2x1bWJ1cyd9LFxyXG4gICAge25hbWU6ICdPa2xhaG9tYScsIGNhcGl0YWw6ICdPa2xhaG9tYSBDaXR5J30sXHJcbiAgICB7bmFtZTogJ09yZWdvbicsIGNhcGl0YWw6ICdTYWxlbSd9LFxyXG4gICAge25hbWU6ICdQZW5uc3lsdmFuaWEnLCBjYXBpdGFsOiAnSGFycmlzYnVyZyd9LFxyXG4gICAge25hbWU6ICdSaG9kZSBJc2xhbmQnLCBjYXBpdGFsOiAnUHJvdmlkZW5jZSd9LFxyXG4gICAge25hbWU6ICdTb3V0aCBDYXJvbGluYScsIGNhcGl0YWw6ICdDb2x1bWJpYSd9LFxyXG4gICAge25hbWU6ICdTb3V0aCBEYWtvdGEnLCBjYXBpdGFsOiAnUGllcnJlJ30sXHJcbiAgICB7bmFtZTogJ1Rlbm5lc3NlZScsIGNhcGl0YWw6ICdOYXNodmlsbGUnfSxcclxuICAgIHtuYW1lOiAnVGV4YXMnLCBjYXBpdGFsOiAnQXVzdGluJ30sXHJcbiAgICB7bmFtZTogJ1V0YWgnLCBjYXBpdGFsOiAnU2FsdCBMYWtlIENpdHknfSxcclxuICAgIHtuYW1lOiAnVmVybW9udCcsIGNhcGl0YWw6ICdNb250cGVsaWVyJ30sXHJcbiAgICB7bmFtZTogJ1ZpcmdpbmlhJywgY2FwaXRhbDogJ1JpY2htb25kJ30sXHJcbiAgICB7bmFtZTogJ1dhc2hpbmd0b24nLCBjYXBpdGFsOiAnT2x5bXBpYSd9LFxyXG4gICAge25hbWU6ICdXZXN0IFZpcmdpbmlhJywgY2FwaXRhbDogJ0NoYXJsZXN0b24nfSxcclxuICAgIHtuYW1lOiAnV2lzY29uc2luJywgY2FwaXRhbDogJ01hZGlzb24nfSxcclxuICAgIHtuYW1lOiAnV3lvbWluZycsIGNhcGl0YWw6ICdDaGV5ZW5uZSd9LFxyXG4gIF07XHJcbn1cclxuIiwiPGNkay12aXJ0dWFsLXNjcm9sbC12aWV3cG9ydCBjbGFzcz1cImV4YW1wbGUtdmlld3BvcnRcIiBpdGVtU2l6ZT1cIjYwXCI+XHJcbiAgPGRsIGNsYXNzPVwiZXhhbXBsZS1kbFwiPlxyXG4gICAgPG5nLWNvbnRhaW5lciAqY2RrVmlydHVhbEZvcj1cImxldCBzdGF0ZSBvZiBzdGF0ZXNcIj5cclxuICAgICAgPGR0IGNsYXNzPVwiZXhhbXBsZS1kdFwiPnt7c3RhdGUubmFtZX19PC9kdD5cclxuICAgICAgPGRkIGNsYXNzPVwiZXhhbXBsZS1kZFwiPnt7c3RhdGUuY2FwaXRhbH19PC9kZD5cclxuICAgIDwvbmctY29udGFpbmVyPlxyXG4gIDwvZGw+XHJcbjwvY2RrLXZpcnR1YWwtc2Nyb2xsLXZpZXdwb3J0PlxyXG4iXX0=