import { Component } from '@angular/core';
import { FormControl, Validators, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { map } from 'rxjs/operators';
import { AsyncPipe, JsonPipe } from '@angular/common';
import { CdkListbox, CdkOption } from '@angular/cdk/listbox';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
/** @title Listbox with forms validation. */
export class CdkListboxFormsValidationExample {
    constructor() {
        this.signs = [
            'Rat',
            'Ox',
            'Tiger',
            'Rabbit',
            'Dragon',
            'Snake',
            'Horse',
            'Goat',
            'Monkey',
            'Rooster',
            'Dog',
            'Pig',
        ];
        // #docregion errors
        this.signCtrl = new FormControl([], Validators.required);
        this.invalid = this.signCtrl.valueChanges.pipe(map(() => this.signCtrl.touched && !this.signCtrl.valid));
    }
    getErrors() {
        const errors = [];
        if (this.signCtrl.hasError('required')) {
            errors.push('You must enter your zodiac sign');
        }
        if (this.signCtrl.hasError('cdkListboxUnexpectedMultipleValues')) {
            errors.push('You can only select one zodiac sign');
        }
        if (this.signCtrl.hasError('cdkListboxUnexpectedOptionValues')) {
            const invalidOptions = this.signCtrl.getError('cdkListboxUnexpectedOptionValues').values;
            errors.push(`You entered an invalid zodiac sign: ${invalidOptions[0]}`);
        }
        return errors.length ? errors : null;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.4", ngImport: i0, type: CdkListboxFormsValidationExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.0.4", type: CdkListboxFormsValidationExample, isStandalone: true, selector: "cdk-listbox-forms-validation-example", exportAs: ["cdkListboxFormsValidationExample"], ngImport: i0, template: "<div class=\"example-listbox-container\" [class.example-listbox-invalid]=\"invalid | async\">\r\n  <label class=\"example-listbox-label\" id=\"example-zodiac-sign-label\">\r\n    Zodiac Sign\r\n  </label>\r\n  <ul cdkListbox\r\n      [formControl]=\"signCtrl\"\r\n      aria-labelledby=\"example-zodiac-sign-label\"\r\n      class=\"example-listbox\">\r\n    @for (sign of signs; track sign) {\r\n      <li [cdkOption]=\"sign\" class=\"example-option\">{{sign}}</li>\r\n    }\r\n  </ul>\r\n</div>\r\n@if (invalid | async) {\r\n  <div class=\"example-listbox-errors\">\r\n    @for (error of getErrors(); track error) {\r\n      <p>{{error}}</p>\r\n    }\r\n  </div>\r\n}\r\n<p>\r\n  Your zodiac sign is: <strong>{{signCtrl.value | json}}</strong>&nbsp;\r\n  <button (click)=\"signCtrl.setValue(['Cat'])\">Set: Cat</button>&nbsp;\r\n  <button (click)=\"signCtrl.setValue(['Dragon', 'Snake'])\">Set: Dragon, Snake</button>&nbsp;\r\n  <button (click)=\"signCtrl.setValue(['Cat', 'Rat'])\">Set: Cat, Rat</button>&nbsp;\r\n  <button (click)=\"signCtrl.setValue([])\">Clear</button>\r\n</p>\r\n", styles: [".example-listbox-container {\r\n  display: block;\r\n  width: 250px;\r\n  border: 1px solid black;\r\n}\r\n\r\n.example-listbox-invalid {\r\n  border-color: red;\r\n}\r\n\r\n.example-listbox-label {\r\n  display: block;\r\n  padding: 5px;\r\n}\r\n\r\n.example-listbox-invalid .example-listbox-label {\r\n  color: red;\r\n}\r\n\r\n.example-listbox {\r\n  list-style: none;\r\n  padding: 0;\r\n  margin: 0;\r\n  height: 200px;\r\n  overflow: auto;\r\n}\r\n\r\n.example-option {\r\n  position: relative;\r\n  padding: 5px 5px 5px 25px;\r\n}\r\n\r\n.example-option[aria-selected='true']::before {\r\n  content: '';\r\n  display: block;\r\n  width: 20px;\r\n  height: 20px;\r\n  background-image: url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" width=\"24\"><path d=\"m9.55 18-5.7-5.7 1.425-1.425L9.55 15.15l9.175-9.175L20.15 7.4Z\"/></svg>'); /* stylelint-disable-line */\r\n  background-size: cover;\r\n  position: absolute;\r\n  left: 2px;\r\n}\r\n\r\n.example-option:focus {\r\n  background: rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.example-listbox-errors {\r\n  color: red;\r\n}\r\n"], dependencies: [{ kind: "directive", type: CdkListbox, selector: "[cdkListbox]", inputs: ["id", "tabindex", "cdkListboxValue", "cdkListboxMultiple", "cdkListboxDisabled", "cdkListboxUseActiveDescendant", "cdkListboxOrientation", "cdkListboxCompareWith", "cdkListboxNavigationWrapDisabled", "cdkListboxNavigatesDisabledOptions"], outputs: ["cdkListboxValueChange"], exportAs: ["cdkListbox"] }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "ngmodule", type: ReactiveFormsModule }, { kind: "directive", type: i1.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: CdkOption, selector: "[cdkOption]", inputs: ["id", "cdkOption", "cdkOptionTypeaheadLabel", "cdkOptionDisabled", "tabindex"], exportAs: ["cdkOption"] }, { kind: "pipe", type: AsyncPipe, name: "async" }, { kind: "pipe", type: JsonPipe, name: "json" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.4", ngImport: i0, type: CdkListboxFormsValidationExample, decorators: [{
            type: Component,
            args: [{ selector: 'cdk-listbox-forms-validation-example', exportAs: 'cdkListboxFormsValidationExample', standalone: true, imports: [CdkListbox, FormsModule, ReactiveFormsModule, CdkOption, AsyncPipe, JsonPipe], template: "<div class=\"example-listbox-container\" [class.example-listbox-invalid]=\"invalid | async\">\r\n  <label class=\"example-listbox-label\" id=\"example-zodiac-sign-label\">\r\n    Zodiac Sign\r\n  </label>\r\n  <ul cdkListbox\r\n      [formControl]=\"signCtrl\"\r\n      aria-labelledby=\"example-zodiac-sign-label\"\r\n      class=\"example-listbox\">\r\n    @for (sign of signs; track sign) {\r\n      <li [cdkOption]=\"sign\" class=\"example-option\">{{sign}}</li>\r\n    }\r\n  </ul>\r\n</div>\r\n@if (invalid | async) {\r\n  <div class=\"example-listbox-errors\">\r\n    @for (error of getErrors(); track error) {\r\n      <p>{{error}}</p>\r\n    }\r\n  </div>\r\n}\r\n<p>\r\n  Your zodiac sign is: <strong>{{signCtrl.value | json}}</strong>&nbsp;\r\n  <button (click)=\"signCtrl.setValue(['Cat'])\">Set: Cat</button>&nbsp;\r\n  <button (click)=\"signCtrl.setValue(['Dragon', 'Snake'])\">Set: Dragon, Snake</button>&nbsp;\r\n  <button (click)=\"signCtrl.setValue(['Cat', 'Rat'])\">Set: Cat, Rat</button>&nbsp;\r\n  <button (click)=\"signCtrl.setValue([])\">Clear</button>\r\n</p>\r\n", styles: [".example-listbox-container {\r\n  display: block;\r\n  width: 250px;\r\n  border: 1px solid black;\r\n}\r\n\r\n.example-listbox-invalid {\r\n  border-color: red;\r\n}\r\n\r\n.example-listbox-label {\r\n  display: block;\r\n  padding: 5px;\r\n}\r\n\r\n.example-listbox-invalid .example-listbox-label {\r\n  color: red;\r\n}\r\n\r\n.example-listbox {\r\n  list-style: none;\r\n  padding: 0;\r\n  margin: 0;\r\n  height: 200px;\r\n  overflow: auto;\r\n}\r\n\r\n.example-option {\r\n  position: relative;\r\n  padding: 5px 5px 5px 25px;\r\n}\r\n\r\n.example-option[aria-selected='true']::before {\r\n  content: '';\r\n  display: block;\r\n  width: 20px;\r\n  height: 20px;\r\n  background-image: url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" width=\"24\"><path d=\"m9.55 18-5.7-5.7 1.425-1.425L9.55 15.15l9.175-9.175L20.15 7.4Z\"/></svg>'); /* stylelint-disable-line */\r\n  background-size: cover;\r\n  position: absolute;\r\n  left: 2px;\r\n}\r\n\r\n.example-option:focus {\r\n  background: rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.example-listbox-errors {\r\n  color: red;\r\n}\r\n"] }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RrLWxpc3Rib3gtZm9ybXMtdmFsaWRhdGlvbi1leGFtcGxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMtZXhhbXBsZXMvY2RrL2xpc3Rib3gvY2RrLWxpc3Rib3gtZm9ybXMtdmFsaWRhdGlvbi9jZGstbGlzdGJveC1mb3Jtcy12YWxpZGF0aW9uLWV4YW1wbGUudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy1leGFtcGxlcy9jZGsvbGlzdGJveC9jZGstbGlzdGJveC1mb3Jtcy12YWxpZGF0aW9uL2Nkay1saXN0Ym94LWZvcm1zLXZhbGlkYXRpb24tZXhhbXBsZS5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDeEMsT0FBTyxFQUFDLFdBQVcsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLG1CQUFtQixFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDekYsT0FBTyxFQUFDLEdBQUcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRW5DLE9BQU8sRUFBQyxTQUFTLEVBQUUsUUFBUSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDcEQsT0FBTyxFQUFDLFVBQVUsRUFBRSxTQUFTLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQzs7O0FBRTNELDRDQUE0QztBQVM1QyxNQUFNLE9BQU8sZ0NBQWdDO0lBaUIzQztRQWhCQSxVQUFLLEdBQUc7WUFDTixLQUFLO1lBQ0wsSUFBSTtZQUNKLE9BQU87WUFDUCxRQUFRO1lBQ1IsUUFBUTtZQUNSLE9BQU87WUFDUCxPQUFPO1lBQ1AsTUFBTTtZQUNOLFFBQVE7WUFDUixTQUFTO1lBQ1QsS0FBSztZQUNMLEtBQUs7U0FDTixDQUFDO1FBU0Ysb0JBQW9CO1FBQ3BCLGFBQVEsR0FBRyxJQUFJLFdBQVcsQ0FBVyxFQUFFLEVBQUUsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBTjVELElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUM1QyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUN6RCxDQUFDO0lBQ0osQ0FBQztJQUtELFNBQVM7UUFDUCxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUM7UUFDbEIsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUN0QyxNQUFNLENBQUMsSUFBSSxDQUFDLGlDQUFpQyxDQUFDLENBQUM7U0FDaEQ7UUFDRCxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLG9DQUFvQyxDQUFDLEVBQUU7WUFDaEUsTUFBTSxDQUFDLElBQUksQ0FBQyxxQ0FBcUMsQ0FBQyxDQUFDO1NBQ3BEO1FBQ0QsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxrQ0FBa0MsQ0FBQyxFQUFFO1lBQzlELE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLGtDQUFrQyxDQUFDLENBQUMsTUFBTSxDQUFDO1lBQ3pGLE1BQU0sQ0FBQyxJQUFJLENBQUMsdUNBQXVDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDekU7UUFDRCxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ3ZDLENBQUM7OEdBdkNVLGdDQUFnQztrR0FBaEMsZ0NBQWdDLGdKQ2hCN0MsaWtDQTJCQSxpcENEYlksVUFBVSw4V0FBRSxXQUFXLHNJQUFFLG1CQUFtQixrTkFBRSxTQUFTLHFLQUFFLFNBQVMseUNBQUUsUUFBUTs7MkZBRTNFLGdDQUFnQztrQkFSNUMsU0FBUzsrQkFDRSxzQ0FBc0MsWUFDdEMsa0NBQWtDLGNBR2hDLElBQUksV0FDUCxDQUFDLFVBQVUsRUFBRSxXQUFXLEVBQUUsbUJBQW1CLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxRQUFRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7Rm9ybUNvbnRyb2wsIFZhbGlkYXRvcnMsIEZvcm1zTW9kdWxlLCBSZWFjdGl2ZUZvcm1zTW9kdWxlfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCB7bWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7QXN5bmNQaXBlLCBKc29uUGlwZX0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHtDZGtMaXN0Ym94LCBDZGtPcHRpb259IGZyb20gJ0Bhbmd1bGFyL2Nkay9saXN0Ym94JztcclxuXHJcbi8qKiBAdGl0bGUgTGlzdGJveCB3aXRoIGZvcm1zIHZhbGlkYXRpb24uICovXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnY2RrLWxpc3Rib3gtZm9ybXMtdmFsaWRhdGlvbi1leGFtcGxlJyxcclxuICBleHBvcnRBczogJ2Nka0xpc3Rib3hGb3Jtc1ZhbGlkYXRpb25FeGFtcGxlJyxcclxuICB0ZW1wbGF0ZVVybDogJ2Nkay1saXN0Ym94LWZvcm1zLXZhbGlkYXRpb24tZXhhbXBsZS5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnY2RrLWxpc3Rib3gtZm9ybXMtdmFsaWRhdGlvbi1leGFtcGxlLmNzcyddLFxyXG4gIHN0YW5kYWxvbmU6IHRydWUsXHJcbiAgaW1wb3J0czogW0Nka0xpc3Rib3gsIEZvcm1zTW9kdWxlLCBSZWFjdGl2ZUZvcm1zTW9kdWxlLCBDZGtPcHRpb24sIEFzeW5jUGlwZSwgSnNvblBpcGVdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgQ2RrTGlzdGJveEZvcm1zVmFsaWRhdGlvbkV4YW1wbGUge1xyXG4gIHNpZ25zID0gW1xyXG4gICAgJ1JhdCcsXHJcbiAgICAnT3gnLFxyXG4gICAgJ1RpZ2VyJyxcclxuICAgICdSYWJiaXQnLFxyXG4gICAgJ0RyYWdvbicsXHJcbiAgICAnU25ha2UnLFxyXG4gICAgJ0hvcnNlJyxcclxuICAgICdHb2F0JyxcclxuICAgICdNb25rZXknLFxyXG4gICAgJ1Jvb3N0ZXInLFxyXG4gICAgJ0RvZycsXHJcbiAgICAnUGlnJyxcclxuICBdO1xyXG4gIGludmFsaWQ6IE9ic2VydmFibGU8Ym9vbGVhbj47XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5pbnZhbGlkID0gdGhpcy5zaWduQ3RybC52YWx1ZUNoYW5nZXMucGlwZShcclxuICAgICAgbWFwKCgpID0+IHRoaXMuc2lnbkN0cmwudG91Y2hlZCAmJiAhdGhpcy5zaWduQ3RybC52YWxpZCksXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLy8gI2RvY3JlZ2lvbiBlcnJvcnNcclxuICBzaWduQ3RybCA9IG5ldyBGb3JtQ29udHJvbDxzdHJpbmdbXT4oW10sIFZhbGlkYXRvcnMucmVxdWlyZWQpO1xyXG5cclxuICBnZXRFcnJvcnMoKSB7XHJcbiAgICBjb25zdCBlcnJvcnMgPSBbXTtcclxuICAgIGlmICh0aGlzLnNpZ25DdHJsLmhhc0Vycm9yKCdyZXF1aXJlZCcpKSB7XHJcbiAgICAgIGVycm9ycy5wdXNoKCdZb3UgbXVzdCBlbnRlciB5b3VyIHpvZGlhYyBzaWduJyk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5zaWduQ3RybC5oYXNFcnJvcignY2RrTGlzdGJveFVuZXhwZWN0ZWRNdWx0aXBsZVZhbHVlcycpKSB7XHJcbiAgICAgIGVycm9ycy5wdXNoKCdZb3UgY2FuIG9ubHkgc2VsZWN0IG9uZSB6b2RpYWMgc2lnbicpO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMuc2lnbkN0cmwuaGFzRXJyb3IoJ2Nka0xpc3Rib3hVbmV4cGVjdGVkT3B0aW9uVmFsdWVzJykpIHtcclxuICAgICAgY29uc3QgaW52YWxpZE9wdGlvbnMgPSB0aGlzLnNpZ25DdHJsLmdldEVycm9yKCdjZGtMaXN0Ym94VW5leHBlY3RlZE9wdGlvblZhbHVlcycpLnZhbHVlcztcclxuICAgICAgZXJyb3JzLnB1c2goYFlvdSBlbnRlcmVkIGFuIGludmFsaWQgem9kaWFjIHNpZ246ICR7aW52YWxpZE9wdGlvbnNbMF19YCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZXJyb3JzLmxlbmd0aCA/IGVycm9ycyA6IG51bGw7XHJcbiAgfVxyXG4gIC8vICNlbmRkb2NyZWdpb24gZXJyb3JzXHJcbn1cclxuIiwiPGRpdiBjbGFzcz1cImV4YW1wbGUtbGlzdGJveC1jb250YWluZXJcIiBbY2xhc3MuZXhhbXBsZS1saXN0Ym94LWludmFsaWRdPVwiaW52YWxpZCB8IGFzeW5jXCI+XHJcbiAgPGxhYmVsIGNsYXNzPVwiZXhhbXBsZS1saXN0Ym94LWxhYmVsXCIgaWQ9XCJleGFtcGxlLXpvZGlhYy1zaWduLWxhYmVsXCI+XHJcbiAgICBab2RpYWMgU2lnblxyXG4gIDwvbGFiZWw+XHJcbiAgPHVsIGNka0xpc3Rib3hcclxuICAgICAgW2Zvcm1Db250cm9sXT1cInNpZ25DdHJsXCJcclxuICAgICAgYXJpYS1sYWJlbGxlZGJ5PVwiZXhhbXBsZS16b2RpYWMtc2lnbi1sYWJlbFwiXHJcbiAgICAgIGNsYXNzPVwiZXhhbXBsZS1saXN0Ym94XCI+XHJcbiAgICBAZm9yIChzaWduIG9mIHNpZ25zOyB0cmFjayBzaWduKSB7XHJcbiAgICAgIDxsaSBbY2RrT3B0aW9uXT1cInNpZ25cIiBjbGFzcz1cImV4YW1wbGUtb3B0aW9uXCI+e3tzaWdufX08L2xpPlxyXG4gICAgfVxyXG4gIDwvdWw+XHJcbjwvZGl2PlxyXG5AaWYgKGludmFsaWQgfCBhc3luYykge1xyXG4gIDxkaXYgY2xhc3M9XCJleGFtcGxlLWxpc3Rib3gtZXJyb3JzXCI+XHJcbiAgICBAZm9yIChlcnJvciBvZiBnZXRFcnJvcnMoKTsgdHJhY2sgZXJyb3IpIHtcclxuICAgICAgPHA+e3tlcnJvcn19PC9wPlxyXG4gICAgfVxyXG4gIDwvZGl2PlxyXG59XHJcbjxwPlxyXG4gIFlvdXIgem9kaWFjIHNpZ24gaXM6IDxzdHJvbmc+e3tzaWduQ3RybC52YWx1ZSB8IGpzb259fTwvc3Ryb25nPiZuYnNwO1xyXG4gIDxidXR0b24gKGNsaWNrKT1cInNpZ25DdHJsLnNldFZhbHVlKFsnQ2F0J10pXCI+U2V0OiBDYXQ8L2J1dHRvbj4mbmJzcDtcclxuICA8YnV0dG9uIChjbGljayk9XCJzaWduQ3RybC5zZXRWYWx1ZShbJ0RyYWdvbicsICdTbmFrZSddKVwiPlNldDogRHJhZ29uLCBTbmFrZTwvYnV0dG9uPiZuYnNwO1xyXG4gIDxidXR0b24gKGNsaWNrKT1cInNpZ25DdHJsLnNldFZhbHVlKFsnQ2F0JywgJ1JhdCddKVwiPlNldDogQ2F0LCBSYXQ8L2J1dHRvbj4mbmJzcDtcclxuICA8YnV0dG9uIChjbGljayk9XCJzaWduQ3RybC5zZXRWYWx1ZShbXSlcIj5DbGVhcjwvYnV0dG9uPlxyXG48L3A+XHJcbiJdfQ==