import { Component } from '@angular/core';
import { MatTableModule } from '@angular/material/table';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/table";
/**
 * @title Table showing each row context properties.
 */
export class TableRowContextExample {
    constructor() {
        this.displayedColumns = ['$implicit', 'index', 'count', 'first', 'last', 'even', 'odd'];
        this.data = ['one', 'two', 'three', 'four', 'five'];
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.4", ngImport: i0, type: TableRowContextExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.0.4", type: TableRowContextExample, isStandalone: true, selector: "table-row-context-example", ngImport: i0, template: "<table mat-table [dataSource]=\"data\" class=\"mat-elevation-z8\">\r\n  <!-- Implicit Column -->\r\n  <ng-container matColumnDef=\"$implicit\">\r\n    <th mat-header-cell *matHeaderCellDef> $implicit </th>\r\n    <td mat-cell *matCellDef=\"let data\"> {{data}} </td>\r\n  </ng-container>\r\n\r\n  <!-- Index Column -->\r\n  <ng-container matColumnDef=\"index\">\r\n    <th mat-header-cell *matHeaderCellDef> index </th>\r\n    <td mat-cell *matCellDef=\"let index = index\"> {{index}} </td>\r\n  </ng-container>\r\n\r\n  <!-- Count Column -->\r\n  <ng-container matColumnDef=\"count\">\r\n    <th mat-header-cell *matHeaderCellDef> count </th>\r\n    <td mat-cell *matCellDef=\"let count = count\"> {{count}} </td>\r\n  </ng-container>\r\n\r\n  <!-- First Column -->\r\n  <ng-container matColumnDef=\"first\">\r\n    <th mat-header-cell *matHeaderCellDef> first </th>\r\n    <td mat-cell *matCellDef=\"let first = first\"> {{first}} </td>\r\n  </ng-container>\r\n\r\n  <!-- Last Column -->\r\n  <ng-container matColumnDef=\"last\">\r\n    <th mat-header-cell *matHeaderCellDef> last </th>\r\n    <td mat-cell *matCellDef=\"let last = last\"> {{last}} </td>\r\n  </ng-container>\r\n\r\n  <!-- Even Column -->\r\n  <ng-container matColumnDef=\"even\">\r\n    <th mat-header-cell *matHeaderCellDef> even </th>\r\n    <td mat-cell *matCellDef=\"let even = even\"> {{even}} </td>\r\n  </ng-container>\r\n\r\n  <!-- Odd Column -->\r\n  <ng-container matColumnDef=\"odd\">\r\n    <th mat-header-cell *matHeaderCellDef> odd </th>\r\n    <td mat-cell *matCellDef=\"let odd = odd\"> {{odd}} </td>\r\n  </ng-container>\r\n\r\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n</table>\r\n", styles: ["table {\r\n  width: 100%;\r\n}\r\n"], dependencies: [{ kind: "ngmodule", type: MatTableModule }, { kind: "component", type: i1.MatTable, selector: "mat-table, table[mat-table]", exportAs: ["matTable"] }, { kind: "directive", type: i1.MatHeaderCellDef, selector: "[matHeaderCellDef]" }, { kind: "directive", type: i1.MatHeaderRowDef, selector: "[matHeaderRowDef]", inputs: ["matHeaderRowDef", "matHeaderRowDefSticky"] }, { kind: "directive", type: i1.MatColumnDef, selector: "[matColumnDef]", inputs: ["sticky", "matColumnDef"] }, { kind: "directive", type: i1.MatCellDef, selector: "[matCellDef]" }, { kind: "directive", type: i1.MatRowDef, selector: "[matRowDef]", inputs: ["matRowDefColumns", "matRowDefWhen"] }, { kind: "directive", type: i1.MatHeaderCell, selector: "mat-header-cell, th[mat-header-cell]" }, { kind: "directive", type: i1.MatCell, selector: "mat-cell, td[mat-cell]" }, { kind: "component", type: i1.MatHeaderRow, selector: "mat-header-row, tr[mat-header-row]", exportAs: ["matHeaderRow"] }, { kind: "component", type: i1.MatRow, selector: "mat-row, tr[mat-row]", exportAs: ["matRow"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.4", ngImport: i0, type: TableRowContextExample, decorators: [{
            type: Component,
            args: [{ selector: 'table-row-context-example', standalone: true, imports: [MatTableModule], template: "<table mat-table [dataSource]=\"data\" class=\"mat-elevation-z8\">\r\n  <!-- Implicit Column -->\r\n  <ng-container matColumnDef=\"$implicit\">\r\n    <th mat-header-cell *matHeaderCellDef> $implicit </th>\r\n    <td mat-cell *matCellDef=\"let data\"> {{data}} </td>\r\n  </ng-container>\r\n\r\n  <!-- Index Column -->\r\n  <ng-container matColumnDef=\"index\">\r\n    <th mat-header-cell *matHeaderCellDef> index </th>\r\n    <td mat-cell *matCellDef=\"let index = index\"> {{index}} </td>\r\n  </ng-container>\r\n\r\n  <!-- Count Column -->\r\n  <ng-container matColumnDef=\"count\">\r\n    <th mat-header-cell *matHeaderCellDef> count </th>\r\n    <td mat-cell *matCellDef=\"let count = count\"> {{count}} </td>\r\n  </ng-container>\r\n\r\n  <!-- First Column -->\r\n  <ng-container matColumnDef=\"first\">\r\n    <th mat-header-cell *matHeaderCellDef> first </th>\r\n    <td mat-cell *matCellDef=\"let first = first\"> {{first}} </td>\r\n  </ng-container>\r\n\r\n  <!-- Last Column -->\r\n  <ng-container matColumnDef=\"last\">\r\n    <th mat-header-cell *matHeaderCellDef> last </th>\r\n    <td mat-cell *matCellDef=\"let last = last\"> {{last}} </td>\r\n  </ng-container>\r\n\r\n  <!-- Even Column -->\r\n  <ng-container matColumnDef=\"even\">\r\n    <th mat-header-cell *matHeaderCellDef> even </th>\r\n    <td mat-cell *matCellDef=\"let even = even\"> {{even}} </td>\r\n  </ng-container>\r\n\r\n  <!-- Odd Column -->\r\n  <ng-container matColumnDef=\"odd\">\r\n    <th mat-header-cell *matHeaderCellDef> odd </th>\r\n    <td mat-cell *matCellDef=\"let odd = odd\"> {{odd}} </td>\r\n  </ng-container>\r\n\r\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n</table>\r\n", styles: ["table {\r\n  width: 100%;\r\n}\r\n"] }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUtcm93LWNvbnRleHQtZXhhbXBsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzLWV4YW1wbGVzL21hdGVyaWFsL3RhYmxlL3RhYmxlLXJvdy1jb250ZXh0L3RhYmxlLXJvdy1jb250ZXh0LWV4YW1wbGUudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy1leGFtcGxlcy9tYXRlcmlhbC90YWJsZS90YWJsZS1yb3ctY29udGV4dC90YWJsZS1yb3ctY29udGV4dC1leGFtcGxlLmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN4QyxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0seUJBQXlCLENBQUM7OztBQUV2RDs7R0FFRztBQVFILE1BQU0sT0FBTyxzQkFBc0I7SUFQbkM7UUFRRSxxQkFBZ0IsR0FBYSxDQUFDLFdBQVcsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzdGLFNBQUksR0FBYSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztLQUMxRDs4R0FIWSxzQkFBc0I7a0dBQXRCLHNCQUFzQixxRkNibkMsMnVEQThDQSwyRkRuQ1ksY0FBYzs7MkZBRWIsc0JBQXNCO2tCQVBsQyxTQUFTOytCQUNFLDJCQUEyQixjQUd6QixJQUFJLFdBQ1AsQ0FBQyxjQUFjLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7TWF0VGFibGVNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL3RhYmxlJztcclxuXHJcbi8qKlxyXG4gKiBAdGl0bGUgVGFibGUgc2hvd2luZyBlYWNoIHJvdyBjb250ZXh0IHByb3BlcnRpZXMuXHJcbiAqL1xyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ3RhYmxlLXJvdy1jb250ZXh0LWV4YW1wbGUnLFxyXG4gIHN0eWxlVXJsczogWyd0YWJsZS1yb3ctY29udGV4dC1leGFtcGxlLmNzcyddLFxyXG4gIHRlbXBsYXRlVXJsOiAndGFibGUtcm93LWNvbnRleHQtZXhhbXBsZS5odG1sJyxcclxuICBzdGFuZGFsb25lOiB0cnVlLFxyXG4gIGltcG9ydHM6IFtNYXRUYWJsZU1vZHVsZV0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBUYWJsZVJvd0NvbnRleHRFeGFtcGxlIHtcclxuICBkaXNwbGF5ZWRDb2x1bW5zOiBzdHJpbmdbXSA9IFsnJGltcGxpY2l0JywgJ2luZGV4JywgJ2NvdW50JywgJ2ZpcnN0JywgJ2xhc3QnLCAnZXZlbicsICdvZGQnXTtcclxuICBkYXRhOiBzdHJpbmdbXSA9IFsnb25lJywgJ3R3bycsICd0aHJlZScsICdmb3VyJywgJ2ZpdmUnXTtcclxufVxyXG4iLCI8dGFibGUgbWF0LXRhYmxlIFtkYXRhU291cmNlXT1cImRhdGFcIiBjbGFzcz1cIm1hdC1lbGV2YXRpb24tejhcIj5cclxuICA8IS0tIEltcGxpY2l0IENvbHVtbiAtLT5cclxuICA8bmctY29udGFpbmVyIG1hdENvbHVtbkRlZj1cIiRpbXBsaWNpdFwiPlxyXG4gICAgPHRoIG1hdC1oZWFkZXItY2VsbCAqbWF0SGVhZGVyQ2VsbERlZj4gJGltcGxpY2l0IDwvdGg+XHJcbiAgICA8dGQgbWF0LWNlbGwgKm1hdENlbGxEZWY9XCJsZXQgZGF0YVwiPiB7e2RhdGF9fSA8L3RkPlxyXG4gIDwvbmctY29udGFpbmVyPlxyXG5cclxuICA8IS0tIEluZGV4IENvbHVtbiAtLT5cclxuICA8bmctY29udGFpbmVyIG1hdENvbHVtbkRlZj1cImluZGV4XCI+XHJcbiAgICA8dGggbWF0LWhlYWRlci1jZWxsICptYXRIZWFkZXJDZWxsRGVmPiBpbmRleCA8L3RoPlxyXG4gICAgPHRkIG1hdC1jZWxsICptYXRDZWxsRGVmPVwibGV0IGluZGV4ID0gaW5kZXhcIj4ge3tpbmRleH19IDwvdGQ+XHJcbiAgPC9uZy1jb250YWluZXI+XHJcblxyXG4gIDwhLS0gQ291bnQgQ29sdW1uIC0tPlxyXG4gIDxuZy1jb250YWluZXIgbWF0Q29sdW1uRGVmPVwiY291bnRcIj5cclxuICAgIDx0aCBtYXQtaGVhZGVyLWNlbGwgKm1hdEhlYWRlckNlbGxEZWY+IGNvdW50IDwvdGg+XHJcbiAgICA8dGQgbWF0LWNlbGwgKm1hdENlbGxEZWY9XCJsZXQgY291bnQgPSBjb3VudFwiPiB7e2NvdW50fX0gPC90ZD5cclxuICA8L25nLWNvbnRhaW5lcj5cclxuXHJcbiAgPCEtLSBGaXJzdCBDb2x1bW4gLS0+XHJcbiAgPG5nLWNvbnRhaW5lciBtYXRDb2x1bW5EZWY9XCJmaXJzdFwiPlxyXG4gICAgPHRoIG1hdC1oZWFkZXItY2VsbCAqbWF0SGVhZGVyQ2VsbERlZj4gZmlyc3QgPC90aD5cclxuICAgIDx0ZCBtYXQtY2VsbCAqbWF0Q2VsbERlZj1cImxldCBmaXJzdCA9IGZpcnN0XCI+IHt7Zmlyc3R9fSA8L3RkPlxyXG4gIDwvbmctY29udGFpbmVyPlxyXG5cclxuICA8IS0tIExhc3QgQ29sdW1uIC0tPlxyXG4gIDxuZy1jb250YWluZXIgbWF0Q29sdW1uRGVmPVwibGFzdFwiPlxyXG4gICAgPHRoIG1hdC1oZWFkZXItY2VsbCAqbWF0SGVhZGVyQ2VsbERlZj4gbGFzdCA8L3RoPlxyXG4gICAgPHRkIG1hdC1jZWxsICptYXRDZWxsRGVmPVwibGV0IGxhc3QgPSBsYXN0XCI+IHt7bGFzdH19IDwvdGQ+XHJcbiAgPC9uZy1jb250YWluZXI+XHJcblxyXG4gIDwhLS0gRXZlbiBDb2x1bW4gLS0+XHJcbiAgPG5nLWNvbnRhaW5lciBtYXRDb2x1bW5EZWY9XCJldmVuXCI+XHJcbiAgICA8dGggbWF0LWhlYWRlci1jZWxsICptYXRIZWFkZXJDZWxsRGVmPiBldmVuIDwvdGg+XHJcbiAgICA8dGQgbWF0LWNlbGwgKm1hdENlbGxEZWY9XCJsZXQgZXZlbiA9IGV2ZW5cIj4ge3tldmVufX0gPC90ZD5cclxuICA8L25nLWNvbnRhaW5lcj5cclxuXHJcbiAgPCEtLSBPZGQgQ29sdW1uIC0tPlxyXG4gIDxuZy1jb250YWluZXIgbWF0Q29sdW1uRGVmPVwib2RkXCI+XHJcbiAgICA8dGggbWF0LWhlYWRlci1jZWxsICptYXRIZWFkZXJDZWxsRGVmPiBvZGQgPC90aD5cclxuICAgIDx0ZCBtYXQtY2VsbCAqbWF0Q2VsbERlZj1cImxldCBvZGQgPSBvZGRcIj4ge3tvZGR9fSA8L3RkPlxyXG4gIDwvbmctY29udGFpbmVyPlxyXG5cclxuICA8dHIgbWF0LWhlYWRlci1yb3cgKm1hdEhlYWRlclJvd0RlZj1cImRpc3BsYXllZENvbHVtbnNcIj48L3RyPlxyXG4gIDx0ciBtYXQtcm93ICptYXRSb3dEZWY9XCJsZXQgcm93OyBjb2x1bW5zOiBkaXNwbGF5ZWRDb2x1bW5zO1wiPjwvdHI+XHJcbjwvdGFibGU+XHJcbiJdfQ==