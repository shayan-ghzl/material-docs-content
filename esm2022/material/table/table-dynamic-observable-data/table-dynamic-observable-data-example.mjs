import { Component } from '@angular/core';
import { DataSource } from '@angular/cdk/collections';
import { ReplaySubject } from 'rxjs';
import { MatTableModule } from '@angular/material/table';
import { MatButtonModule } from '@angular/material/button';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/button";
import * as i2 from "@angular/material/table";
const ELEMENT_DATA = [
    { position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H' },
    { position: 2, name: 'Helium', weight: 4.0026, symbol: 'He' },
    { position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li' },
    { position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be' },
    { position: 5, name: 'Boron', weight: 10.811, symbol: 'B' },
    { position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C' },
    { position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N' },
    { position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O' },
    { position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F' },
    { position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne' },
];
/**
 * @title Adding and removing data when using an observable-based datasource.
 */
export class TableDynamicObservableDataExample {
    constructor() {
        this.displayedColumns = ['position', 'name', 'weight', 'symbol'];
        this.dataToDisplay = [...ELEMENT_DATA];
        this.dataSource = new ExampleDataSource(this.dataToDisplay);
    }
    addData() {
        const randomElementIndex = Math.floor(Math.random() * ELEMENT_DATA.length);
        this.dataToDisplay = [...this.dataToDisplay, ELEMENT_DATA[randomElementIndex]];
        this.dataSource.setData(this.dataToDisplay);
    }
    removeData() {
        this.dataToDisplay = this.dataToDisplay.slice(0, -1);
        this.dataSource.setData(this.dataToDisplay);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.4", ngImport: i0, type: TableDynamicObservableDataExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.0.4", type: TableDynamicObservableDataExample, isStandalone: true, selector: "table-dynamic-observable-data-example", ngImport: i0, template: "<div class=\"demo-button-container\">\r\n  <button mat-raised-button (click)=\"addData()\" class=\"demo-button\">\r\n    Add data\r\n  </button>\r\n  <button\r\n      mat-raised-button\r\n      [disabled]=\"!dataToDisplay.length\"\r\n      (click)=\"removeData()\"\r\n      class=\"demo-button\">\r\n    Remove data\r\n  </button>\r\n</div>\r\n\r\n<table mat-table [dataSource]=\"dataSource\" class=\"mat-elevation-z8 demo-table\">\r\n  <!-- Position Column -->\r\n  <ng-container matColumnDef=\"position\">\r\n    <th mat-header-cell *matHeaderCellDef>No.</th>\r\n    <td mat-cell *matCellDef=\"let element\">{{element.position}}</td>\r\n  </ng-container>\r\n\r\n  <!-- Name Column -->\r\n  <ng-container matColumnDef=\"name\">\r\n    <th mat-header-cell *matHeaderCellDef>Name</th>\r\n    <td mat-cell *matCellDef=\"let element\">{{element.name}}</td>\r\n  </ng-container>\r\n\r\n  <!-- Weight Column -->\r\n  <ng-container matColumnDef=\"weight\">\r\n    <th mat-header-cell *matHeaderCellDef>Weight</th>\r\n    <td mat-cell *matCellDef=\"let element\">{{element.weight}}</td>\r\n  </ng-container>\r\n\r\n  <!-- Symbol Column -->\r\n  <ng-container matColumnDef=\"symbol\">\r\n    <th mat-header-cell *matHeaderCellDef>Symbol</th>\r\n    <td mat-cell *matCellDef=\"let element\">{{element.symbol}}</td>\r\n  </ng-container>\r\n\r\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n</table>\r\n", styles: [".demo-table {\r\n  width: 100%;\r\n}\r\n\r\n.demo-button-container {\r\n  padding-bottom: 16px;\r\n}\r\n\r\n.demo-button + .demo-button {\r\n  margin-left: 8px;\r\n}\r\n"], dependencies: [{ kind: "ngmodule", type: MatButtonModule }, { kind: "component", type: i1.MatButton, selector: "    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  ", exportAs: ["matButton"] }, { kind: "ngmodule", type: MatTableModule }, { kind: "component", type: i2.MatTable, selector: "mat-table, table[mat-table]", exportAs: ["matTable"] }, { kind: "directive", type: i2.MatHeaderCellDef, selector: "[matHeaderCellDef]" }, { kind: "directive", type: i2.MatHeaderRowDef, selector: "[matHeaderRowDef]", inputs: ["matHeaderRowDef", "matHeaderRowDefSticky"] }, { kind: "directive", type: i2.MatColumnDef, selector: "[matColumnDef]", inputs: ["sticky", "matColumnDef"] }, { kind: "directive", type: i2.MatCellDef, selector: "[matCellDef]" }, { kind: "directive", type: i2.MatRowDef, selector: "[matRowDef]", inputs: ["matRowDefColumns", "matRowDefWhen"] }, { kind: "directive", type: i2.MatHeaderCell, selector: "mat-header-cell, th[mat-header-cell]" }, { kind: "directive", type: i2.MatCell, selector: "mat-cell, td[mat-cell]" }, { kind: "component", type: i2.MatHeaderRow, selector: "mat-header-row, tr[mat-header-row]", exportAs: ["matHeaderRow"] }, { kind: "component", type: i2.MatRow, selector: "mat-row, tr[mat-row]", exportAs: ["matRow"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.4", ngImport: i0, type: TableDynamicObservableDataExample, decorators: [{
            type: Component,
            args: [{ selector: 'table-dynamic-observable-data-example', standalone: true, imports: [MatButtonModule, MatTableModule], template: "<div class=\"demo-button-container\">\r\n  <button mat-raised-button (click)=\"addData()\" class=\"demo-button\">\r\n    Add data\r\n  </button>\r\n  <button\r\n      mat-raised-button\r\n      [disabled]=\"!dataToDisplay.length\"\r\n      (click)=\"removeData()\"\r\n      class=\"demo-button\">\r\n    Remove data\r\n  </button>\r\n</div>\r\n\r\n<table mat-table [dataSource]=\"dataSource\" class=\"mat-elevation-z8 demo-table\">\r\n  <!-- Position Column -->\r\n  <ng-container matColumnDef=\"position\">\r\n    <th mat-header-cell *matHeaderCellDef>No.</th>\r\n    <td mat-cell *matCellDef=\"let element\">{{element.position}}</td>\r\n  </ng-container>\r\n\r\n  <!-- Name Column -->\r\n  <ng-container matColumnDef=\"name\">\r\n    <th mat-header-cell *matHeaderCellDef>Name</th>\r\n    <td mat-cell *matCellDef=\"let element\">{{element.name}}</td>\r\n  </ng-container>\r\n\r\n  <!-- Weight Column -->\r\n  <ng-container matColumnDef=\"weight\">\r\n    <th mat-header-cell *matHeaderCellDef>Weight</th>\r\n    <td mat-cell *matCellDef=\"let element\">{{element.weight}}</td>\r\n  </ng-container>\r\n\r\n  <!-- Symbol Column -->\r\n  <ng-container matColumnDef=\"symbol\">\r\n    <th mat-header-cell *matHeaderCellDef>Symbol</th>\r\n    <td mat-cell *matCellDef=\"let element\">{{element.symbol}}</td>\r\n  </ng-container>\r\n\r\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n</table>\r\n", styles: [".demo-table {\r\n  width: 100%;\r\n}\r\n\r\n.demo-button-container {\r\n  padding-bottom: 16px;\r\n}\r\n\r\n.demo-button + .demo-button {\r\n  margin-left: 8px;\r\n}\r\n"] }]
        }] });
class ExampleDataSource extends DataSource {
    constructor(initialData) {
        super();
        this._dataStream = new ReplaySubject();
        this.setData(initialData);
    }
    connect() {
        return this._dataStream;
    }
    disconnect() { }
    setData(data) {
        this._dataStream.next(data);
    }
}
//# sourceMappingURL=data:application/json;base64,